__author__ = 'dayue'
#-*-coding:utf-8 -*-

import numpy as np

points = np.arange(-5,5,0.01) #1000个间隔相等的点

print points

xs,ys = np.meshgrid(points,points)

print ys
# [[-5.   -5.   -5.   ..., -5.   -5.   -5.  ]
#  [-4.99 -4.99 -4.99 ..., -4.99 -4.99 -4.99]
#  [-4.98 -4.98 -4.98 ..., -4.98 -4.98 -4.98]
#  ...,
#  [ 4.97  4.97  4.97 ...,  4.97  4.97  4.97]
#  [ 4.98  4.98  4.98 ...,  4.98  4.98  4.98]
#  [ 4.99  4.99  4.99 ...,  4.99  4.99  4.99]]


import matplotlib.pyplot as plt

z = np.sqrt(xs ** 2 + ys **2)

print z
# [[ 7.07106781  7.06400028  7.05693985 ...,  7.04988652  7.05693985
#    7.06400028]
#  [ 7.06400028  7.05692568  7.04985815 ...,  7.04279774  7.04985815
#    7.05692568]
#  [ 7.05693985  7.04985815  7.04278354 ...,  7.03571603  7.04278354
#    7.04985815]
#  ...,
#  [ 7.04988652  7.04279774  7.03571603 ...,  7.0286414   7.03571603
#    7.04279774]
#  [ 7.05693985  7.04985815  7.04278354 ...,  7.03571603  7.04278354
#    7.04985815]
#  [ 7.06400028  7.05692568  7.04985815 ...,  7.04279774  7.04985815
#    7.05692568]]


#######################################################

xarr = np.array([1.1,1.2,1.3,1.4,1.5])
yarr = np.array([2.1,2.2,2.3,2.4,2.5])


cond = np.array([True,False,True,True,False])


result = [(x if c else y)
          for x,y,c in zip(xarr,yarr,cond)]

print result
# [1.1000000000000001, 2.2000000000000002, 1.3, 1.3999999999999999, 2.5]



result = np.where(cond,xarr,yarr)
print result
# [ 1.1  2.2  1.3  1.4  2.5]




arr = np.random.randn(4,4)
print arr
# [[ 0.65556435 -0.19020226  0.93082744 -0.37976781]
#  [-0.28058877  1.76670111 -0.23719402  1.50173368]
#  [-2.14816364 -0.2467477  -0.44491468 -0.09746176]
#  [-0.97252386 -0.07680954 -0.36350103 -3.0701903 ]]

print np.where(arr>0 ,2 ,-2)

# [[ 2 -2  2 -2]
#  [-2  2 -2  2]
#  [-2 -2 -2 -2]
#  [-2 -2 -2 -2]]

print  np.where(arr >0, 2, arr )
# [[ 2.         -0.4867051  -0.31900868  2.        ]
#  [-0.69791066 -0.44684556 -1.01837103 -0.98234947]
#  [ 2.          2.          2.         -0.72253493]
#  [-0.0978646   2.         -0.26847672  2.        ]]
###############################################################
print "###############################"
arr = np.random.randn(5,4)

print arr
# [[ 0.06458227  1.3161301   0.62783063 -0.9425935 ]
#  [ 0.43659092  0.35118474  0.0558426  -1.10895541]
#  [ 0.61747429 -0.3378508   2.07915616 -0.32994005]
#  [-0.62800476  0.67388226 -0.71936493 -0.67943684]
#  [-0.66316552  0.91389431 -2.06363319 -1.18087514]]

print arr.mean()
# 0.220254647395


print np.mean(arr)
# 0.220254647395


print arr.sum()
# 4.40509294791

#行均值
print arr.mean(axis=1)

#列总量
print arr.sum(0)

arr = np.array([[0,1,2],[3,4,5],[6,7,8]])

print arr
# [[0 1 2]
#  [3 4 5]
#  [6 7 8]]
#累计和
print arr.cumsum(0)
# [[ 0  1  2]
#  [ 3  5  7]
#  [ 9 12 15]]
#累计积
print arr.cumprod(1)
# [[  0   0   0]
#  [  3  12  60]
#  [  6  42 336]]
################################################

arr = np.random.randn(100)

print (arr>0).sum()
# 45

bools = np.array([False,False,True,False])

print bools.any()
# True

print bools.all()
# False

####################################

arr = np.random.randn(8)
print arr
# [ 0.72785085 -1.03465816 -0.73256127 -0.08601895 -1.01971534  0.29653467
#  -2.23892164  0.03092871]

arr.sort()
print arr
# [-2.23892164 -1.03465816 -1.01971534 -0.73256127 -0.08601895  0.03092871
#   0.29653467  0.72785085]

arr =np.random.randn(5,3)
print arr
# [[ 1.56384986  1.03092497  0.15944599]
#  [ 0.63733261  0.25499505 -1.07175527]
#  [ 1.51037886  0.97399487  0.51465108]
#  [-1.47382182 -1.07556232 -0.55158928]
#  [-1.05658181  0.09013268  0.09335552]]

arr.sort(1)

print arr
# [[ 0.15944599  1.03092497  1.56384986]
#  [-1.07175527  0.25499505  0.63733261]
#  [ 0.51465108  0.97399487  1.51037886]
#  [-1.47382182 -1.07556232 -0.55158928]
#  [-1.05658181  0.09013268  0.09335552]]


large_arr = np.random.randn(1000)
large_arr.sort()

print large_arr[int(0.05 * len(large_arr))] #%5分位数
# -1.72349039537


###################################
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])

print np.unique(names)
# ['Bob' 'Joe' 'Will']

ints = np.array([1,1,4,6,4,5,3,3,4,5,2])
print  np.unique(ints)
# [1 2 3 4 5 6]

#python code

print sorted(set(names))
# ['Bob' 'Joe' 'Will']
##########################################

values = np.array([6,0,0,3,2,5,6])

print np.in1d(values,[2,3,6])
# [ True False False  True  True False  True]











































